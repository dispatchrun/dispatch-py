# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dispatch.sdk.v1 import dispatch_pb2 as dispatch_dot_sdk_dot_v1_dot_dispatch__pb2


class DispatchServiceStub(object):
    """DispatchService is a service allowing the trigger of programmable endpoints
    from a dispatch SDK.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Dispatch = channel.unary_unary(
            "/dispatch.sdk.v1.DispatchService/Dispatch",
            request_serializer=dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchRequest.SerializeToString,
            response_deserializer=dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchResponse.FromString,
        )


class DispatchServiceServicer(object):
    """DispatchService is a service allowing the trigger of programmable endpoints
    from a dispatch SDK.
    """

    def Dispatch(self, request, context):
        """Dispatch submits a list of asynchronous function calls to the service.

        The method does not wait for executions to complete before returning,
        it only ensures that the creation was persisted, and returns unique
        identifiers to represent the executions.

        The request contains a list of executions to be triggered; the method is
        atomic, either all executions are recorded, or none and an error is
        returned to explain the reason for the failure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DispatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Dispatch": grpc.unary_unary_rpc_method_handler(
            servicer.Dispatch,
            request_deserializer=dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchRequest.FromString,
            response_serializer=dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "dispatch.sdk.v1.DispatchService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DispatchService(object):
    """DispatchService is a service allowing the trigger of programmable endpoints
    from a dispatch SDK.
    """

    @staticmethod
    def Dispatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dispatch.sdk.v1.DispatchService/Dispatch",
            dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchRequest.SerializeToString,
            dispatch_dot_sdk_dot_v1_dot_dispatch__pb2.DispatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
