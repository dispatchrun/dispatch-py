# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ring.task.v1 import service_pb2 as ring_dot_task_dot_v1_dot_service__pb2


class ServiceStub(object):
    """Service represents the set of APIs to perform the administration of tasks in
    a Ring instance.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTasks = channel.unary_unary(
            "/ring.task.v1.Service/CreateTasks",
            request_serializer=ring_dot_task_dot_v1_dot_service__pb2.CreateTasksRequest.SerializeToString,
            response_deserializer=ring_dot_task_dot_v1_dot_service__pb2.CreateTasksResponse.FromString,
        )


class ServiceServicer(object):
    """Service represents the set of APIs to perform the administration of tasks in
    a Ring instance.
    """

    def CreateTasks(self, request, context):
        """CreateTasks is invoked to create new tasks."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateTasks": grpc.unary_unary_rpc_method_handler(
            servicer.CreateTasks,
            request_deserializer=ring_dot_task_dot_v1_dot_service__pb2.CreateTasksRequest.FromString,
            response_serializer=ring_dot_task_dot_v1_dot_service__pb2.CreateTasksResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ring.task.v1.Service", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Service(object):
    """Service represents the set of APIs to perform the administration of tasks in
    a Ring instance.
    """

    @staticmethod
    def CreateTasks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ring.task.v1.Service/CreateTasks",
            ring_dot_task_dot_v1_dot_service__pb2.CreateTasksRequest.SerializeToString,
            ring_dot_task_dot_v1_dot_service__pb2.CreateTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
