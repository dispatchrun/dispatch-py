# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ring.record.v1 import record_pb2 as ring_dot_record_dot_v1_dot_record__pb2


class BlockStoreServiceStub(object):
    """BlockStoreService is a service that provides access to record blocks stored
    by Ring instances.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetBlockRanges = channel.unary_unary(
            "/ring.record.v1.BlockStoreService/GetBlockRanges",
            request_serializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesRequest.SerializeToString,
            response_deserializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesResponse.FromString,
        )
        self.GetBlockMetadata = channel.unary_unary(
            "/ring.record.v1.BlockStoreService/GetBlockMetadata",
            request_serializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataRequest.SerializeToString,
            response_deserializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataResponse.FromString,
        )
        self.ScanBlocks = channel.unary_stream(
            "/ring.record.v1.BlockStoreService/ScanBlocks",
            request_serializer=ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksRequest.SerializeToString,
            response_deserializer=ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksResponse.FromString,
        )


class BlockStoreServiceServicer(object):
    """BlockStoreService is a service that provides access to record blocks stored
    by Ring instances.
    """

    def GetBlockRanges(self, request, context):
        """GetBlockRanges queries ranges of record blocks.

        The method allows querying multiple ranges, and returns one block range
        for each range that was queried. If one of the requested ranges could not
        be read, the corresponding block range will contain an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetBlockMetadata(self, request, context):
        """GetBlockMetadata queries metadata about record blocks.

        The method allows querying multiple prefixes, and returns one block entry
        for each prefix that was queried. If one of the requested prefixes could
        not be read, the corresponding block entry will contain an error.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ScanBlocks(self, request, context):
        """ScanBlocks scans blocks of records for a given partition, returning a
        stream of ScanBlocksResponse messages.

        The request can set a limit to the number of block entries returned in the
        response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_BlockStoreServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetBlockRanges": grpc.unary_unary_rpc_method_handler(
            servicer.GetBlockRanges,
            request_deserializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesRequest.FromString,
            response_serializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesResponse.SerializeToString,
        ),
        "GetBlockMetadata": grpc.unary_unary_rpc_method_handler(
            servicer.GetBlockMetadata,
            request_deserializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataRequest.FromString,
            response_serializer=ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataResponse.SerializeToString,
        ),
        "ScanBlocks": grpc.unary_stream_rpc_method_handler(
            servicer.ScanBlocks,
            request_deserializer=ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksRequest.FromString,
            response_serializer=ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ring.record.v1.BlockStoreService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class BlockStoreService(object):
    """BlockStoreService is a service that provides access to record blocks stored
    by Ring instances.
    """

    @staticmethod
    def GetBlockRanges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ring.record.v1.BlockStoreService/GetBlockRanges",
            ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesRequest.SerializeToString,
            ring_dot_record_dot_v1_dot_record__pb2.GetBlockRangesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetBlockMetadata(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ring.record.v1.BlockStoreService/GetBlockMetadata",
            ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataRequest.SerializeToString,
            ring_dot_record_dot_v1_dot_record__pb2.GetBlockMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ScanBlocks(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/ring.record.v1.BlockStoreService/ScanBlocks",
            ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksRequest.SerializeToString,
            ring_dot_record_dot_v1_dot_record__pb2.ScanBlocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
